// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
package {{regexSplit "\\." (.File.Package | base) -1 | last}}

import (
	context "context"
	fmt "fmt"

	daprc "github.com/dapr/go-sdk/client"
	grpc "google.golang.org/grpc"
	common "github.com/dapr/go-sdk/service/common"
	invoke "github.com/kzmake/dapr-kit/invoke"
)

const {{.Service.Name | title}}Name = "{{.File.Package | base}}.{{.Service.Name}}"

// aliases
type (
	invocationHandler = func(context.Context, *common.InvocationEvent) (*common.Content, error)
)

// {{.Service.Name}}Handler ...
type {{.Service.Name}}Handler interface {
{{- range .Service.Method}}
{{- if and (not .ServerStreaming) (not .ClientStreaming)}}
	{{.Name}}(context.Context, *{{.InputType | splitArray "." | last}}) (*{{.OutputType | splitArray "." | last}}, error)
{{- end}}
{{- end}}
}

// Register{{.Service.Name}}InvocationHandlers ...
func Register{{.Service.Name}}InvocationHandlers(s common.Service, impl {{.Service.Name}}Handler) error {
	return invoke.RegisterInvocationHandlers(s, impl, {{.Service.Name | title}}Name)
}

type {{.Service.Name}}InvocationClient interface {
{{- range .Service.Method}}
{{- if and (not .ServerStreaming) (not .ClientStreaming)}}
	{{.Name}}(context.Context, *{{.InputType | splitArray "." | last}}, ...grpc.CallOption) (*{{.OutputType | splitArray "." | last}}, error)
{{- end}}
{{- end}}
}

type {{.Service.Name | camelCase}}InvocationClient struct {
	appID string
	conn  *grpc.ClientConn
}

func New{{.Service.Name}}InvocationClient(appID string, conn *grpc.ClientConn) {{.Service.Name}}InvocationClient {
	return &{{.Service.Name | camelCase}}InvocationClient{
		appID: appID,
		conn:  conn,
	}
}

{{- range .Service.Method}}
{{- if and (not .ServerStreaming) (not .ClientStreaming)}}

func (c *{{$.Service.Name | camelCase}}InvocationClient) {{.Name}}(ctx context.Context, in *{{.InputType | splitArray "." | last}}, opts ...grpc.CallOption) (*{{.OutputType | splitArray "." | last}}, error) {
	cc := daprc.NewClientWithConnection(c.conn)

	reqData, err := invoke.Marshal(in)
	if err != nil {
		return nil, err
	}

	resData, err := cc.InvokeMethodWithContent(ctx, c.appID, fmt.Sprintf("%s.%s", {{$.Service.Name | title}}Name, "{{.Name}}"), "POST", &daprc.DataContent{
		ContentType: invoke.ContentType,
		Data:        reqData,
	})
	if err != nil {
		return nil, err
	}

	out := &{{.OutputType | splitArray "." | last}}{}
	if err := invoke.Unmarshal(resData, out); err != nil {
		return nil, err
	}

	return out, nil
}
{{- end}}
{{- end}}
