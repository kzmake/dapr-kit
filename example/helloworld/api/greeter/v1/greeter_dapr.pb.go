// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
package v1

import (
	context "context"
	fmt "fmt"

	daprc "github.com/dapr/go-sdk/client"
	common "github.com/dapr/go-sdk/service/common"
	content "github.com/kzmake/dapr-kit/content"
	proto "github.com/kzmake/dapr-kit/content/proto"
	invoke "github.com/kzmake/dapr-kit/invoke"
	grpc "google.golang.org/grpc"
)

const _ = daprc.UndefinedType
const _ = common.SubscriptionResponseStatusSuccess
const _ = invoke.DaprPackageIsVersion1
const _ = grpc.SupportPackageIsVersion7

var _ fmt.Stringer
var _ context.Context

const GreeterServiceName = "api.greeter.v1.GreeterService"

// GreeterServiceHandler ...
type GreeterServiceHandler interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
}

// RegisterGreeterServiceInvocationHandlers ...
func RegisterGreeterServiceInvocationHandlers(s common.Service, impl GreeterServiceHandler) error {
	fns := map[string]invoke.HandlerFunc{
		"api.greeter.v1.GreeterService/Hello": _GreeterService_Hello_Invocation_Handler(impl.Hello),
	}

	for name, fn := range fns {
		if err := s.AddServiceInvocationHandler(name, fn); err != nil {
			return err
		}
	}

	return nil
}

func _GreeterService_Hello_Invocation_Handler(handler interface{}) invoke.HandlerFunc {
	return func(ctx context.Context, in *common.InvocationEvent) (*common.Content, error) {
		b, err := content.NewBinder(in.ContentType)
		if err != nil {
			return nil, err
		}

		req := new(HelloRequest)
		if err := b.Unmarshal(in.Data, req); err != nil {
			return nil, err
		}

		fn := handler.(func(context.Context, *HelloRequest) (*HelloResponse, error))
		res, err := fn(ctx, req)
		if err != nil {
			return nil, err
		}

		d, err := b.Marshal(res)
		if err != nil {
			return nil, err
		}

		out := &common.Content{
			DataTypeURL: "api.greeter.v1.GreeterService/Hello",
			ContentType: "application/json",
			Data:        d,
		}

		return out, nil
	}
}

type GreeterServiceInvocationClient interface {
	Hello(context.Context, *HelloRequest, ...grpc.CallOption,) (*HelloResponse, error)
}

type GreeterserviceInvocationClient struct {
	appID string
	conn  *grpc.ClientConn
}

func NewGreeterServiceInvocationClient(appID string, conn *grpc.ClientConn) GreeterServiceInvocationClient {
	return &GreeterserviceInvocationClient{
		appID: appID,
		conn:  conn,
	}
}

func (c *GreeterserviceInvocationClient) Hello(
	ctx context.Context, in *HelloRequest, opts ...grpc.CallOption,
) (*HelloResponse, error) {
	cc := daprc.NewClientWithConnection(c.conn)

	b := proto.NewBinder()

	req, err := b.Marshal(in)
	if err != nil {
		return nil, err
	}

	res, err := cc.InvokeMethodWithContent(ctx, c.appID, "api.greeter.v1.GreeterService/Hello", "POST", &daprc.DataContent{
		ContentType: "application/x-protobuf",
		Data:        req,
	})
	if err != nil {
		return nil, err
	}

	out := new(HelloResponse)
	if err := b.Unmarshal(res, out); err != nil {
		return nil, err
	}

	return out, nil
}
