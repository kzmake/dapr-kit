// Code generated by protoc-gen-gotemplate. DO NOT EDIT.
package v1

import (
	context "context"
	fmt "fmt"

	daprc "github.com/dapr/go-sdk/client"
	common "github.com/dapr/go-sdk/service/common"
	binding "github.com/kzmake/dapr-kit/binding"
	encoding "github.com/kzmake/dapr-kit/encoding"
	proto "github.com/kzmake/dapr-kit/encoding/proto"
	invoke "github.com/kzmake/dapr-kit/invoke"
	grpc "google.golang.org/grpc"
)

const _ = daprc.UndefinedType
const _ = common.SubscriptionResponseStatusSuccess
const _ = grpc.SupportPackageIsVersion7

var _ fmt.Stringer
var _ context.Context
var _ invoke.Def
var _ binding.Def

const GreeterServiceName = "api.greeter.v1.GreeterService"

// GreeterServiceHandler ...
type GreeterServiceHandler interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
}

// RegisterGreeterServiceInvocationHandler ...
func RegisterGreeterServiceInvocationHandler(s common.Service, impl GreeterServiceHandler) error {
	fns := map[string]invoke.Func{
		"api.greeter.v1.GreeterService/Hello": _GreeterService_Hello_Invocation_Handler(impl.Hello),
	}

	for name, fn := range fns {
		if err := s.AddServiceInvocationHandler(name, fn); err != nil {
			return err
		}
	}

	return nil
}

func _GreeterService_Hello_Invocation_Handler(handler interface{}) invoke.Func {
	return func(ctx context.Context, in *common.InvocationEvent) (*common.Content, error) {
		e, err := encoding.New(in.ContentType)
		if err != nil {
			return nil, err
		}

		req := new(HelloRequest)
		if err := e.Unmarshal(in.Data, req); err != nil {
			return nil, err
		}

		fn := handler.(func(context.Context, *HelloRequest) (*HelloResponse, error))
		res, err := fn(ctx, req)
		if err != nil {
			return nil, err
		}

		d, err := e.Marshal(res)
		if err != nil {
			return nil, err
		}

		out := &common.Content{
			DataTypeURL: "api.greeter.v1.GreeterService/Hello",
			ContentType: "application/json",
			Data:        d,
		}

		return out, nil
	}
}

// RegisterGreeterServiceBindingHandler ...
func RegisterGreeterServiceBindingHandler(s common.Service, impl GreeterServiceHandler) error {
	fns := map[string]binding.Func{
		"api.greeter.v1.GreeterService/Hello": _GreeterService_Hello_Binding_Handler(impl.Hello),
	}

	for name, fn := range fns {
		if err := s.AddBindingInvocationHandler(name, fn); err != nil {
			return err
		}
	}

	return nil
}

func _GreeterService_Hello_Binding_Handler(handler interface{}) binding.Func {
	return func(ctx context.Context, in *common.BindingEvent) ([]byte, error) {
		e := proto.NewEncoding()

		req := new(HelloRequest)
		if err := e.Unmarshal(in.Data, req); err != nil {
			return nil, err
		}

		fn := handler.(func(context.Context, *HelloRequest) (*HelloResponse, error))
		res, err := fn(ctx, req)
		if err != nil {
			return nil, err
		}

		d, err := e.Marshal(res)
		if err != nil {
			return nil, err
		}

		return d, nil
	}
}

type GreeterServiceInvocationClient interface {
	Hello(context.Context, *HelloRequest, ...grpc.CallOption) (*HelloResponse, error)
}

type greeterserviceInvocationClient struct {
	appID string
	conn  *grpc.ClientConn
}

func NewGreeterServiceInvocationClient(appID string, conn *grpc.ClientConn) GreeterServiceInvocationClient {
	return &greeterserviceInvocationClient{
		appID: appID,
		conn:  conn,
	}
}

func (c *greeterserviceInvocationClient) Hello(
	ctx context.Context, in *HelloRequest, opts ...grpc.CallOption,
) (*HelloResponse, error) {
	cc := daprc.NewClientWithConnection(c.conn)

	e := proto.NewEncoding()

	req, err := e.Marshal(in)
	if err != nil {
		return nil, err
	}

	res, err := cc.InvokeMethodWithContent(ctx, c.appID, "api.greeter.v1.GreeterService/Hello", "POST", &daprc.DataContent{
		ContentType: "application/x-protobuf",
		Data:        req,
	})
	if err != nil {
		return nil, err
	}

	out := new(HelloResponse)
	if err := e.Unmarshal(res, out); err != nil {
		return nil, err
	}

	return out, nil
}

type GreeterServiceBindingClient interface {
	Hello(context.Context, *HelloRequest, map[string]string) (*HelloResponse, error)
}

type greeterserviceBindingClient struct {
	conn *grpc.ClientConn
}

func NewGreeterServiceBindingClient(conn *grpc.ClientConn) GreeterServiceBindingClient {
	return &greeterserviceBindingClient{
		conn: conn,
	}
}

func (c *greeterserviceBindingClient) Hello(
	ctx context.Context, in *HelloRequest, meta map[string]string,
) (*HelloResponse, error) {
	cc := daprc.NewClientWithConnection(c.conn)

	e := proto.NewEncoding()

	d, err := e.Marshal(in)
	if err != nil {
		return nil, err
	}

	req := &daprc.InvokeBindingRequest{
		Name:      "api.greeter.v1.GreeterService/Hello",
		Operation: "create",
		Data:      d,
		Metadata:  map[string]string{},
	}

	res, err := cc.InvokeBinding(ctx, req)
	if err != nil {
		return nil, err
	}
	if err != nil {
		return nil, err
	}

	out := new(HelloResponse)
	if err := e.Unmarshal(res.Data, out); err != nil {
		return nil, err
	}

	return out, nil
}

type GreeterServiceOutputBindingClient interface {
	Hello(context.Context, *HelloRequest, map[string]string) error
}

type greeterserviceOutputBindingClient struct {
	conn *grpc.ClientConn
}

func NewGreeterServiceOutputBindingClient(conn *grpc.ClientConn) GreeterServiceOutputBindingClient {
	return &greeterserviceOutputBindingClient{
		conn: conn,
	}
}

func (c *greeterserviceOutputBindingClient) Hello(
	ctx context.Context, in *HelloRequest, meta map[string]string,
) error {
	cc := daprc.NewClientWithConnection(c.conn)

	e := proto.NewEncoding()

	d, err := e.Marshal(in)
	if err != nil {
		return err
	}

	req := &daprc.InvokeBindingRequest{
		Name:      "api.greeter.v1.GreeterService/Hello",
		Operation: "create",
		Data:      d,
		Metadata:  map[string]string{},
	}

	if err := cc.InvokeOutputBinding(ctx, req); err != nil {
		return err
	}

	return nil
}
